// <auto-generated />
using System;
using LC.DATABASE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LC.DATABASE.Migrations
{
    [DbContext(typeof(LegalConnectionContext))]
    [Migration("20201120184409_2")]
    partial class _2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LC.ENTITIES.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DocumentType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastConnection")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("RegisterBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Sex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)3);

                    b.Property<string>("Surnames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameDirection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("RouteType")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SequenceOrder")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("StatusDirection")
                        .HasColumnType("tinyint");

                    b.Property<string>("UrlDirection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Benefit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Benefits");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ExternalPublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LawyerPublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ExternalPublicationId");

                    b.HasIndex("LawyerPublicationId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Configuration", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.ExternalPublication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LawyerFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LawyerPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExternalPublications");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.FrequentQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Icon")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("FrequentQuestions");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.HowItWorksStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HowItWorksSteps");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Lawyer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CAL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(19,2)");

                    b.Property<bool>("FreeFirst")
                        .HasColumnType("bit");

                    b.Property<int>("FreeLegalCases")
                        .HasColumnType("int");

                    b.Property<bool>("FreeUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("ProfileWithChanges")
                        .HasColumnType("bit");

                    b.Property<bool>("PublicProfile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<bool>("TermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ValidationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Lawyers");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerCard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardBrand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("LastCardDigits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.ToTable("LawyerCards");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("TemporalStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("WorkArea")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.ToTable("LawyerExperiences");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerInterview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndRange")
                        .HasColumnType("time");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Selected")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartRange")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.ToTable("LawyerInterviews");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TemporalStatus")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LawyerId");

                    b.ToTable("LawyerLanguages");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerObservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBeenCorrected")
                        .HasColumnType("bit");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Process")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.ToTable("LawyerObservations");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerPlanDetail", b =>
                {
                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Canceled")
                        .HasColumnType("bit");

                    b.Property<string>("LawyerCardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TempEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TempStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LawyerId");

                    b.HasIndex("LawyerCardId");

                    b.HasIndex("PlanId");

                    b.ToTable("LawyerPlanDetails");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerPlanHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.HasIndex("PlanId");

                    b.ToTable("LawyerPlanHistories");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerPublication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.ToTable("LawyerPublications");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerQualification", b =>
                {
                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LegalCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Commentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Qualification")
                        .HasColumnType("int");

                    b.HasKey("LawyerId", "LegalCaseId", "ClientId");

                    b.HasIndex("ClientId");

                    b.HasIndex("LegalCaseId");

                    b.ToTable("LawyerQualifications");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerSpecialityTheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecialityThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.HasIndex("SpecialityThemeId");

                    b.ToTable("LawyerSpecialityThemes");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerStudy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("TemporalStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("Ubication")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.ToTable("LawyerStudies");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerWithdrawal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WithdrawalRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.HasIndex("WithdrawalRequestId");

                    b.ToTable("LawyerWithdrawals");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerWithdrawalInfo", b =>
                {
                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dni")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("FinancialEntity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterbankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LawyerId");

                    b.ToTable("LawyerWithdrawalInfos");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerWithdrawalRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,2)");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepositDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dni")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("FinancialEntity")
                        .HasColumnType("tinyint");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterbankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("UlrReceiptFileForFees")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlDepositReceipt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.ToTable("LawyerWithdrawalRequests");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DerivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SelectionLawyerStartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UrlFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValidationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("LegalCases");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseApplicantLawyer", b =>
                {
                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LegalCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResponseTime")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("LawyerId", "LegalCaseId");

                    b.HasIndex("LegalCaseId");

                    b.ToTable("LegalCaseApplicantLawyers");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseDelayedTask", b =>
                {
                    b.Property<Guid>("LegalCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Task")
                        .HasColumnType("tinyint");

                    b.Property<string>("HangfireJobId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LegalCaseId", "Task");

                    b.ToTable("LegalCaseDelayedTasks");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseFiledLawyer", b =>
                {
                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LegalCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDateTimeAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LawyerId", "LegalCaseId");

                    b.HasIndex("LegalCaseId");

                    b.ToTable("LegalCaseFiledLawyers");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseLawyer", b =>
                {
                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LegalCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(19,2)");

                    b.Property<int>("ResponseTime")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("LawyerId", "LegalCaseId");

                    b.HasIndex("LegalCaseId");

                    b.ToTable("LegalCaseLawyers");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseObservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("HasBeenCorrected")
                        .HasColumnType("bit");

                    b.Property<Guid>("LegalCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Process")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorRoleId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LegalCaseId");

                    b.ToTable("LegalCaseObservations");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LegalCaseQuestions");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LegalCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LegalCaseQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LegalCaseId");

                    b.HasIndex("LegalCaseQuestionId");

                    b.ToTable("LegalCaseResponses");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseSpecialityTheme", b =>
                {
                    b.Property<Guid>("LegalCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecialityThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LegalCaseId", "SpecialityThemeId");

                    b.HasIndex("SpecialityThemeId");

                    b.ToTable("LegalCaseSpecialityThemes");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.MissionVision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MissionVisions");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseAmount")
                        .HasColumnType("decimal(19,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(19,2)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(19,2)");

                    b.Property<decimal>("IgvAmount")
                        .HasColumnType("decimal(19,2)");

                    b.Property<decimal>("LawyerAmount")
                        .HasColumnType("decimal(19,2)");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LegalCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("OnlinePaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Serie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(19,2)");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.HasIndex("LegalCaseId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Plan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionLC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Interval")
                        .HasColumnType("tinyint");

                    b.Property<int>("IntervalCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrialDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.PlanBenefit", b =>
                {
                    b.Property<string>("PlanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("BenefitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PlanId", "BenefitId");

                    b.HasIndex("BenefitId");

                    b.ToTable("PlanBenefits");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubigeo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.SectionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionItems");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Shortcut", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentShortcutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UrlDirection")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentShortcutId");

                    b.ToTable("Shortcuts");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.SocialNetwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UrlDirection")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SocialNetworks");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColloquialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.SpecialityTheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColloquialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("SpecialityThemes");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.TemporalLawyer", b =>
                {
                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CAL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DocumentType")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(19,2)");

                    b.Property<bool>("FreeFirst")
                        .HasColumnType("bit");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Sex")
                        .HasColumnType("tinyint");

                    b.Property<string>("Surnames")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LawyerId");

                    b.ToTable("TemporalLawyers");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.TemporalLawyerExperience", b =>
                {
                    b.Property<Guid>("LawyerExperienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkArea")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LawyerExperienceId");

                    b.HasIndex("LawyerId");

                    b.ToTable("TemporalLawyerExperiences");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.TemporalLawyerLanguage", b =>
                {
                    b.Property<Guid?>("LawyerLanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.HasKey("LawyerLanguageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LawyerId");

                    b.ToTable("TemporalLawyerLanguages");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.TemporalLawyerSpecialityTheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LawyerSpecialityThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecialityThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.HasIndex("LawyerSpecialityThemeId");

                    b.HasIndex("SpecialityThemeId");

                    b.ToTable("TemporalLawyerSpecialityThemes");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.TemporalLawyerStudy", b =>
                {
                    b.Property<Guid?>("LawyerStudyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ubication")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LawyerStudyId");

                    b.HasIndex("LawyerId");

                    b.ToTable("TemporalLawyerStudies");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.UserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LC.ENTITIES.Models.ApplicationUser", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.District", "District")
                        .WithMany("Users")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("LC.ENTITIES.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Blog", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.ExternalPublication", "ExternalPublication")
                        .WithMany()
                        .HasForeignKey("ExternalPublicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LC.ENTITIES.Models.LawyerPublication", "LawyerPublication")
                        .WithMany()
                        .HasForeignKey("LawyerPublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Client", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.District", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Lawyer", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerCard", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("LawyerCards")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerExperience", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("LawyerExperiences")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerInterview", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("LawyerInterviews")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerLanguage", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("LawyerLanguages")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerObservation", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("LawyerObservations")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerPlanDetail", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.LawyerCard", "LawyerCard")
                        .WithMany()
                        .HasForeignKey("LawyerCardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithOne("LawyerPlanDetail")
                        .HasForeignKey("LC.ENTITIES.Models.LawyerPlanDetail", "LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerPlanHistory", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", null)
                        .WithMany("LawyerPlanHistories")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LC.ENTITIES.Models.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerPublication", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("LawyerPublications")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerQualification", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("LawyerQualifications")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.LegalCase", "LegalCase")
                        .WithMany()
                        .HasForeignKey("LegalCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerSpecialityTheme", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("LawyerSpecialityThemes")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.SpecialityTheme", "SpecialityTheme")
                        .WithMany("LawyerSpecialityThemes")
                        .HasForeignKey("SpecialityThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerStudy", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("LawyerStudies")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerWithdrawal", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("LawyerWithdrawals")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.LawyerWithdrawalRequest", "WithdrawalRequest")
                        .WithMany()
                        .HasForeignKey("WithdrawalRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerWithdrawalInfo", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithOne("LawyerWithdrawalInfo")
                        .HasForeignKey("LC.ENTITIES.Models.LawyerWithdrawalInfo", "LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LawyerWithdrawalRequest", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("WithdrawalRequests")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCase", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Client", "Client")
                        .WithMany("LegalCases")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseApplicantLawyer", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("LegalCaseApplicantLawyers")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.LegalCase", "LegalCase")
                        .WithMany("LegalCaseApplicantLawyers")
                        .HasForeignKey("LegalCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseDelayedTask", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.LegalCase", "LegalCase")
                        .WithMany("LegalCaseDelayedTasks")
                        .HasForeignKey("LegalCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseFiledLawyer", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("LegalCaseFiledLawyers")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.LegalCase", "LegalCase")
                        .WithMany("LegalCaseFiledLawyers")
                        .HasForeignKey("LegalCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseLawyer", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany("LegalCaseLawyers")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.LegalCase", "LegalCase")
                        .WithMany("LegalCaseLawyers")
                        .HasForeignKey("LegalCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseObservation", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.ApplicationRole", "CreatorRole")
                        .WithMany()
                        .HasForeignKey("CreatorRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LC.ENTITIES.Models.ApplicationUser", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LC.ENTITIES.Models.LegalCase", "LegalCase")
                        .WithMany("LegalCaseObservations")
                        .HasForeignKey("LegalCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseResponse", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.LegalCase", "LegalCase")
                        .WithMany("LegalCaseResponses")
                        .HasForeignKey("LegalCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.LegalCaseQuestion", "LegalCaseQuestion")
                        .WithMany("LegalCaseResponses")
                        .HasForeignKey("LegalCaseQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.LegalCaseSpecialityTheme", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.LegalCase", "LegalCase")
                        .WithMany("LegalCaseSpecialityThemes")
                        .HasForeignKey("LegalCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.SpecialityTheme", "SpecialityTheme")
                        .WithMany()
                        .HasForeignKey("SpecialityThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Payment", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.LegalCase", "LegalCase")
                        .WithMany("Payments")
                        .HasForeignKey("LegalCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.PlanBenefit", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Benefit", "Benefit")
                        .WithMany("PlanBenefits")
                        .HasForeignKey("BenefitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.Plan", "Plan")
                        .WithMany("PlanBenefits")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Province", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Department", "Department")
                        .WithMany("Provinces")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.Shortcut", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Shortcut", "ParentShortcut")
                        .WithMany()
                        .HasForeignKey("ParentShortcutId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("LC.ENTITIES.Models.SpecialityTheme", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Speciality", "Speciality")
                        .WithMany("SpecialityThemes")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.TemporalLawyer", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.TemporalLawyerExperience", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.LawyerExperience", "LawyerExperience")
                        .WithMany()
                        .HasForeignKey("LawyerExperienceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.TemporalLawyerLanguage", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.LawyerLanguage", "LawyerLanguage")
                        .WithMany()
                        .HasForeignKey("LawyerLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.TemporalLawyerSpecialityTheme", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.LawyerSpecialityTheme", "LawyerSpecialityTheme")
                        .WithMany()
                        .HasForeignKey("LawyerSpecialityThemeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LC.ENTITIES.Models.SpecialityTheme", "SpecialityTheme")
                        .WithMany()
                        .HasForeignKey("SpecialityThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.TemporalLawyerStudy", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.LawyerStudy", "LawyerStudy")
                        .WithMany()
                        .HasForeignKey("LawyerStudyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LC.ENTITIES.Models.UserNotification", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LC.ENTITIES.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LC.ENTITIES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
